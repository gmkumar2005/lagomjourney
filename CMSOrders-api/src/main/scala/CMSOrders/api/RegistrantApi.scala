/**
  * The orders API allows you to create, view, update, and delete individual, or a batch, of orders.
  * API for accessing ContosoCMS Order microservice
  *
  * OpenAPI spec version: 1.0.4
  * Contact: you@your-company.com
  *
  * NOTE: This class is auto generated by the swagger code generator program.
  * https://github.com/swagger-api/swagger-codegen.git
  * Do not edit the class manually.
  */

package CMSOrders.api

import CMSOrders.model.{Attendee, Order}
import akka.{Done, NotUsed}
import com.lightbend.lagom.scaladsl.api.transport.Method
import com.lightbend.lagom.scaladsl.api.{Service, ServiceCall}

trait RegistrantApi extends Service {


  final override def descriptor = {
    import Service._
    named("RegistrantApi").withCalls(
      restCall(Method.PUT, "/orders/:conferenceId/:orderId/:seatNumber", addAttendees _),
      restCall(Method.POST, "/orders/:conferenceId", createOrder _),
      restCall(Method.DELETE, "/orders/:conferenceId/:orderId", deleteOrder _),
      restCall(Method.GET, "/orders?page&perPage", getOrders _),
      restCall(Method.GET, "/orders/:conferenceId?page&perPage", getOrdersbyConferenceId _),
      restCall(Method.GET, "/orders/:conferenceId/:orderId?page&perPage", getOrdersbyOrderId _),
      restCall(Method.DELETE, "/orders/:conferenceId/:orderId/:seatNumber", ordersConferenceIdOrderIdSeatNumberDelete _),
      restCall(Method.PUT, "/orders/:conferenceId", updateOrder _)
    ).withAutoAcl(true)
  }


  /**
    * Add or update an attendee
    * Conference id are mandatory for creating an order.  
    *
    * @param conferenceId conferenceId  
    * @param orderId      orderId
    * @param seatNumber   seatNumber
    * @return void Body Parameter  Order object 
    */
  def addAttendees(conferenceId: String, orderId: String, seatNumber: String): ServiceCall[Attendee, String]

  /**
    * Create a new order
    * Conference id are mandatory for creating an order.  
    *
    * @param conferenceId conferenceId 
    * @return void Body Parameter  Order object 
    */
  def createOrder(conferenceId: String): ServiceCall[Order, String]

  /**
    * Delete a order
    * Deletes  existing orders for a given  conference id and order id. 
    *
    * @param conferenceId Conference id  
    * @param orderId      Unique orderId
    * @return void
    */
  def deleteOrder(conferenceId: String, orderId: String): ServiceCall[NotUsed, Done]

  /**
    * Get all Orders
    * Allows you to retrieve the list of existing orders. 
    *
    * @param page    Page number (optional)
    * @param perPage page size , rows per page (optional)
    * @return Seq[Order]
    */
  def getOrders(page: Option[Int] = None, perPage: Option[Int] = None): ServiceCall[NotUsed, Seq[Order]]

  /**
    * Get all Orders of a conference
    * Allows you to retrieve the list of existing orders. 
    *
    * @param conferenceId Conference id  
    * @param page         Page number (optional)
    * @param perPage      page size , rows per page (optional)
    * @return Seq[Order]
    */
  def getOrdersbyConferenceId(page: Option[Int] = None, perPage: Option[Int] = None, conferenceId: String): ServiceCall[NotUsed, Seq[Order]]

  /**
    * Get  an Order
    * Allows you to retrieve the list of existing orders by conference id and order id. 
    *
    * @param conferenceId Conference id  
    * @param orderId      Unique orderId
    * @param page         Page number (optional)
    * @param perPage      page size , rows per page (optional)
    * @return Order
    */
  def getOrdersbyOrderId(conferenceId: String, orderId: String,page: Option[Int] = None, perPage: Option[Int] = None): ServiceCall[NotUsed, Order]

  /**
    * Remove attendee
    *
    * @param conferenceId conferenceId  
    * @param orderId      orderId
    * @param seatNumber   seatNumber
    * @return void
    */
  def ordersConferenceIdOrderIdSeatNumberDelete(conferenceId: String, orderId: String, seatNumber: String): ServiceCall[NotUsed, Done]

  /**
    * Modify a an order
    * Conference id are mandatory for creating an order.  
    *
    * @param conferenceId conferenceId 
    * @return void Body Parameter  Order object 
    */
  def updateOrder(conferenceId: String): ServiceCall[Order, Done]


}

